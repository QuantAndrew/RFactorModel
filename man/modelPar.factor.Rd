% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct00_modelsettingFuncs.R
\name{modelPar.factor}
\alias{modelPar.factor}
\alias{setmodelPar.factor}
\alias{setmodelPar.factor_combi}
\alias{buildFactorList}
\alias{buildFactorList_lcfs}
\title{modelPar.factor}
\usage{
modelPar.factor(modelPar = modelPar.default(), factorFun = "gf_demo",
  factorPar = list(), factorDir = 1, factorStd = "none",
  sectorAttr = defaultSectorAttr(), factorOutlier = 3, factorNA = "na",
  factorName = default.factorName(factorFun, factorPar, factorDir),
  factorID = "", factorType = "", factorDesc = "", FactorList)

setmodelPar.factor(modelPar, factorFun, factorPar, factorDir, factorStd,
  sectorAttr, factorOutlier, factorNA, factorName, factorID, factorType,
  factorDesc, FactorList)

setmodelPar.factor_combi(modelPar, factorLists, wgts, factorStd_mult = "none",
  factorNA_mult = "na", sectorAttr_mult = defaultSectorAttr(), factorDir,
  factorStd, sectorAttr, factorOutlier, factorNA, factorName = "multifactor",
  factorID, factorType, factorDesc)

buildFactorList(factorFun = "gf_demo", factorPar = list(), factorDir = 1,
  factorStd = "none", sectorAttr = defaultSectorAttr(), factorOutlier = 3,
  factorNA = "na", factorName = default.factorName(factorFun, factorPar,
  factorDir), factorID = "", factorType = "", factorDesc = "")

buildFactorList_lcfs(factorID, factorStd = "none",
  sectorAttr = defaultSectorAttr(), factorOutlier = 3, factorNA = "na")
}
\arguments{
\item{modelPar}{a \bold{modelPar} object}

\item{factorFun}{a non-empty character string naming the function to get the factor scores.(See \code{\link{getTSF}})}

\item{factorPar}{a list, or a character string, containing the parameters of the \code{factorFun}.(See \code{\link{getTSF}})}

\item{factorDir}{a integer,should be 1 or -1 (1 for the positive factor,-1 for the negative one).(See \code{\link{getTSF}})}

\item{factorStd}{a character string, indicating the standardizing pattern of the factor score,could be one of "none"(no scaling),"norm"(scaling to 0 mean and 1 stdev),"sectorNe"(scaling to 0 mean and 1 stdev in each sector).}

\item{sectorAttr}{}

\item{factorOutlier}{a numeric value of standard deviations, e.g. 10 means that factor score larger or smaller than ten times the standard deviation will be removed}

\item{factorNA}{a character string, indicating the method to deal with the missing value of the factorscore, could be one of "na"(default,keeping the missing value as it is),"mean","median","max","min".}

\item{factorName}{a character string. IF missing, then take a default name by function \code{default.factorName}.}

\item{factorID}{a character string of factorID, available in table \code{CT_FactorLists()} .}

\item{FactorList}{a list containing all the factor related parametres in it. See more detail in \code{\link{buildFactorList}}.}

\item{factorLists}{See \code{\link{buildFactorLists}}.}
}
\value{
a \bold{modelPar} object.

buildFactorList return a object of \bold{FactorList}, a list of parametres of factor setting

buildFactorList_lcfs get a object of \bold{FactorList} through "lcfs". See more detail in \code{\link{buildFactorLists_lcfs}}.
}
\description{
set the factor related parametres of the model
}
\details{
The different between \code{modelPar.factor} and \code{setmodelPar.factor} is that the all pars of the former have default values, and the latter have not. The former is ussually used to to build the modelPar integrally, and the latter is ussually used to set the parametre individually.

if \code{FactorList} is missing, then the factor related parametres is set by the auguments separately, else, all the parametres is set by the \code{FactorList} once and for all.
}
\note{
if the parammeter \code{factorFun} is \code{"gf_lcfs"}, then the factorDir, factorName, factorID, factorType and factorDesc will be mapped automatically by \code{\link{CT_FactorLists()}}.

\code{setmodelPar.factor_combi} set \code{modelPar} by \code{factorFun="getMultiFactor"} and  \code{factorPar=list(factorLists,wgts)}.  It is used usually in testing the multi-factor-model. See \code{\link{getMultiFactor}}.
}
\examples{
modelPar <- modelPar.default()
modelPar <- modelPar.factor(modelPar,
                           factorFun="gf.pct_chg_per",
                           factorPar=list(N=25),
                           factorDir=-1,
                           factorStd = "sectorNe",
                           factorNA = "na",
                           factorOutlier = 3 )
# -- setmodelPar.factor_combi
mp <- modelPar.default()
factorIDs <- c("F000008","F000001","F000006")
factorLists <- buildFactorLists_lcfs(factorIDs)
wgts <- c(0.5, 0.3, 0.2)
mp_m <- setmodelPar.factor_combi(mp, factorLists, wgts)
# -- set modelPar.factor by a factorlist
FactorList <- buildFactorList(factorFun="gf.pct_chg_per",factorPar=list(N=20))
modelPar <- modelPar.factor(modelPar,FactorList=FactorList)
# -- build a factorlist through "lcfs"
FactorList2 <- buildFactorList_lcfs(factorID="F000001")
}
\seealso{
\code{\link{getTSF}}

Other modelPar setting functions: \code{\link{modelPar.default}},
  \code{\link{modelPar.time}},
  \code{\link{modelPar.title}}, \code{\link{modelPar.univ}}
}
\author{
Ruifei.Yin
}
